<?php
/**
 * @file
 * Core OU  recipe importer code..
 */

/**
 * Create or update a repository item. 
 */
function ou_bagit_importer_save_item($object_array, $parent_collection, $pid_namespace) {

  # We only support a limited number of object types.
  $knownModels = array(
    'book'   => 'islandora:bookCModel',
    'audio'  => 'islandora:sp-audioCModel',
    'image'      => 'islandora:sp_large_image_cmodel',
    'pdf'        => 'islandora:sp_pdf',
    'collection' => 'islandora:collectionCModel',
    'page'       => 'islandora:pageCModel',
  );

  # What are we trying to import?
  # TODO find a better way to check for paged content than file property
  if (isset($object_array['import']) && in_array($object_array['import'], array_keys($knownModels))) {
    $type = $knownModels[$object_array['import']];
  } elseif (isset($object_array['file'])) {
    $type = 'islandora:pageCModel';
  } else {
    drupal_set_message(t('Attempt to load unsupported item type @type.', array('@type' => $type)), 'error');
    watchdog('islandora','Attempt to load unsupported item type %type.', array('%type' => $type), WATCHDOG_ERROR);
    return;
  }

  // Reset because we want to make sure tuque is connecting with the right credentials
  drupal_static_reset('islandora_get_tuque_connection');
  $tuque = islandora_get_tuque_connection();
  $uuid = "{$pid_namespace}".":{$object_array['uuid']}";
  $islandora_object = islandora_object_load($uuid);
  
  $update = (bool) $object_array['update'];

  $content_models = array(
    $type,
    'fedora-system:FedoraObject-3.0',
  );
  $new = TRUE;

  // Don't touch already imported objects unless running an update.
  if ($islandora_object && !$update) {
    drupal_set_message('Item already exists.');
    watchdog('islandora','Item already exists.', array(), WATCHDOG_NOTICE);
    return array(
      'object' => $object_array['uuid'],
      'result' => FALSE,
      'message' => 'Item already exists',
    );
  }
  elseif ($islandora_object) {
    $new = FALSE;
    // We're running an update.
  }

  // Set up islandora object.
  if (!$islandora_object) {
    $islandora_object = $tuque->repository->constructObject( $uuid);
    $islandora_object->id = $uuid;
    $islandora_object->state = 'A';
    $islandora_object->label = $object_array['label'];
    $islandora_object->ownerId = $user->name;
    foreach ($content_models as $content_model) {
      $islandora_object->relationships->add(FEDORA_MODEL_URI, 'hasModel', $content_model);
    }
    
    // Are we loading a page that needs to be stiched in to a book?
    if($type == 'islandora:pageCModel') {
      $islandora_object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOf', $parent_collection);
      $islandora_object->relationships->add(ISLANDORA_RELS_EXT_URI, 'isPageOf', $parent_collection);
      $islandora_object->relationships->add(ISLANDORA_RELS_EXT_URI, 'isSequenceNumber', $object_array['page_number']);
      $islandora_object->relationships->add(ISLANDORA_RELS_EXT_URI, 'isPageNumber', $object_array['page_number']);
      $islandora_object->relationships->add(ISLANDORA_RELS_EXT_URI, 'isSection', '1');
    } else {
      $islandora_object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $parent_collection); 
    }
  }
  else {
    $islandora_object->state = 'A';
    $islandora_object->label = $object_array['label'];
    $islandora_object->ownerId = $user->name;
  }

  $datastreams = array();
  $physical_desc_data = '';

  // book pages have specify the file attribute
  if ($type == 'islandora:pageCModel') {

    if (!empty($object_array['file'])) {
      // Check if the OBJ datastream needs to be created.
      if (
        !empty($islandora_object['OBJ'])
        && md5($islandora_object['OBJ']->content === $object_array['hash'])
      ) {
        // Do nothing if it looks like new content matches existing content. 
      } else if ($object_file = _ou_bagit_importer_copy(
        $object_array['source_uri'],
        $object_array['drupal_directory'],
        $object_array['file'],
        $object_array['hash']
      )) {
        if (md5_file($object_file) !== $object_array['hash']) {
          // Make sure that imported object file hash matches hash from recipe.      
          return array(
            'object' => $islandora_object->id,
            'result' => FALSE,
            'message' => t("Page @page hash does not match hash in recipe (@hash).", array('@page' => $object_array['file'], '@hash' => $object_array['hash'])),
          );
        }
        $exif_info = exif_read_data($object_file);
        if (!empty($exif_info['ImageDescription'])) {
          $physical_desc_data = htmlspecialchars($exif_info['ImageDescription']);
        }
        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $datastreams['OBJ'] = array(
          'type' => finfo_file($finfo, drupal_realpath($object_file)),
          'content' => file_get_contents($object_file),
        );
        finfo_close($finfo);
      } else {
        return array(
          'object' => $islandora_object->id,
          'result' => FALSE,
          'message' => t("Could not find @page specified in recipe.", array('@page' => $object_array['file'])),
        );
      }
    }
    if (!empty($object_array['exif'])) {
      $exif_file = _ou_bagit_importer_copy($object_array['source_uri'], $object_array['drupal_directory'], $object_array['exif']);
      if (file_exists($exif_file)) {
        $datastreams['EXIF'] = array(
          'type' => 'text/plain',
          'content' => file_get_contents($exif_file),
        );
      }
    }
  }

  // MODS metatdata must be provided as MODS or parsed from MarcXML if MODS is not present. 
  // One or the other must be provided, but MODS takes precendence. 
  if(!empty($object_array['metadata']['mods'])) {
    $mods_record = file_get_contents($object_array['metadata']['mods']);
  } elseif (!empty($object_array['metadata']['marcxml'])) {
    $mods_record = ou_bagit_importer_run_xslt_transform(array(
      'input' => file_get_contents($object_array['metadata']['marcxml']),
      'xsl' => drupal_get_path('module', 'islandora_marcxml') . '/xsl/MARC21slim2MODS3-5.xsl',
    ));
  } elseif($type == 'islandora:pageCModel') {
    $copyright_data = 'Physical rights are retained by University of Oklahoma. Copyright is retained in accordance with U.S. copyright laws.';
    $mods_record = _ou_bagit_importer_generate_book_page_mods($islandora_object->label, $physical_desc_data, $copyright_data);
  }
  $datastreams['MODS'] = array(
    'type' => 'text/xml',
    'content' => $mods_record,
  );

  // DC metadata will be derived from MODS
  $dc_record = ou_bagit_importer_run_xslt_transform(array(
    'input' => $mods_record,
    'xsl' => drupal_get_path('module', 'islandora_batch') . '/transforms/mods_to_dc.xsl',
  ));
  $datastreams['DC'] = array(
    'type' => 'text/xml',
    'content' => $dc_record,
  );

  // Thumbnails may be provided for some item types
  if (!empty($object_array['files']['tn'])) {
    $tn_file = _ou_bagit_importer_copy($object_array['source_uri'], $object_array['drupal_directory'], $object_array['files']['tn']);
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $datastreams['TN'] = array(
      'type' => finfo_file($finfo, $tn_file),
      'content' => file_get_contents($tn_file),
    );
    finfo_close($finfo);
  }

  // OBJ files will be provided for most, but not all, object types	
  if (!empty($object_array['files']['obj'])) {
    $obj_file = _ou_bagit_importer_copy($object_array['source_uri'], $object_array['drupal_directory'], $object_array['files']['obj']);
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $datastreams['OBJ'] = array(
      'type' => finfo_file($finfo, $obj_file),
      'content' => file_get_contents($obj_file), 
    );
    finfo_close($finfo);
  }

  // Update exisitng or add new datastreams for repository item  
  foreach ($datastreams as $key => $value) {
    if (!$islandora_object[$key]) {
      $ds = $islandora_object->constructDatastream($key);
      $ds->label = $key;
      $ds->mimetype = $value['type'];
      $ds->control_group = 'M';
      $ds->setContentFromString($value['content']);
      $islandora_object->ingestDatastream($ds);
    }
    else {
      $ds = $islandora_object[$key];
      // Only update this datastream if it has changed.
      if (md5($ds->content) != md5($value['content'])) {
        $ds->label = $key;
        $ds->mimetype = $value['type'];
        $ds->control_group = 'M';
        $ds->setContentFromString($value['content']);
      }
    }
  }
  if ($new) {
    islandora_add_object($islandora_object);
  }

  return array(
    'object' => $islandora_object->id,
    'result' => TRUE,
    'message' => 'Successfully ingested/updated',
  );
}

/**
 * Run xslt transform on xml data.
 */
function ou_bagit_importer_run_xslt_transform($info) {
  $xsl = new DOMDocument();
  $xsl->load($info['xsl']);

  $input = new DOMDocument();
  $input->loadXML($info['input']);

  $processor = new XSLTProcessor();
  $processor->importStylesheet($xsl);

  if (isset($info['php_functions'])) {
    $processor->registerPHPFunctions($info['php_functions']);
  }

  // XXX: Suppressing warnings regarding unregistered prefixes.
  return $processor->transformToXML($input);
}

/**
 * Generate basic mods content for a book page.
 */
function _ou_bagit_importer_generate_book_page_mods($label, $physical_desc_data = NULL, $copyright_data = NULL) {
  $mods = '<?xml version="1.0"?>';
  $mods .= '<mods xmlns="http://www.loc.gov/mods/v3" xmlns:mods="http://www.loc.gov/mods/v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink">';
  $mods .= "<titleInfo><title>{$label}</title><subTitle/></titleInfo>";
  if (!empty($physical_desc_data)) {
    // Do something.
    $mods .= "<physicalDescription><note>{$physical_desc_data}</note></physicalDescription>";
  }
  if (!empty($copyright_data)) {
    $mods .= "<accessCondition type='use and reproduction'>{$copyright_data}</accessCondition>";
  }
  $mods .= "</mods>";
  return $mods;
}

/**
 * Copy file from path to destination directory.
 */
function _ou_bagit_importer_copy($source_uri, $dest_directory, $path, $hash = "") {
  drupal_set_message(t("Get @path for local processing.", array('@path' =>$path )));
  
  $file = basename($path);
  $source = "{$source_uri}/{$path}";

  # Treat path as absolute if it looks like an absolute path
  if (strpos($path, 'http') === 0 || strpos($path,'/')===0)  {
    $source = $path;
  }
  # Use source so we're not copying the file and reduce disk I/O
  if (!ou_bagit_importer_is_path_remote($source)) {
    return $source;
  }

  $destination = "{$dest_directory}/{$file}";

  # don't download if we already have a copy
  if (file_exists($destination) && md5_file($destination) == $hash) {
    return $destination;
  }

  # otherwise we need to get a copy 
  watchdog('islandora', 'Downloading from %dest', array('%dest'=> $destination), WATCHDOG_NOTICE, $link);
  $status = @copy($source, $destination);
  if ($status) {
    return $destination;
  } else {
    watchdog('islandora', 'Error copying %dest', array('%dest'=> $destination), WATCHDOG_ERROR);
  }
}
